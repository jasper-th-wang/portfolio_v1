---
import "@/styles/global.css";
import Header from "@/components/MainHeader.astro";

interface Props {
  // if isHome is true, padding will be added, and nav and socials will be included in header.
  isHome: boolean;
  title?: string;
  subtitle?: string;
  details?: string;
  navItems?: string[];
  content?: string;
}

const {
  isHome,
  title,
  subtitle,
  details,
  navItems = undefined,
  content,
} = Astro.props;

const metadata = {
  title: "Jasper Wang",
  author: "Jasper Wang",
  description:
    "Jasper Wang is a software developer with a deep passion for creating innovative solutions. Educated in Computer Science at BCIT and psychology in UBC.",
};
---

<!doctype html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="author" content={metadata.author} />
    <meta name="description" content={metadata.description} />
    <title>{metadata.title}</title>
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-icon-57x57.png" />
    <link rel="apple-touch-icon" sizes="60x60" href="/apple-icon-60x60.png" />
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-icon-72x72.png" />
    <link rel="apple-touch-icon" sizes="76x76" href="/apple-icon-76x76.png" />
    <link
      rel="apple-touch-icon"
      sizes="114x114"
      href="/apple-icon-114x114.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="120x120"
      href="/apple-icon-120x120.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="144x144"
      href="/apple-icon-144x144.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="152x152"
      href="/apple-icon-152x152.png"
    />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/apple-icon-180x180.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="192x192"
      href="/android-icon-192x192.png"
    />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="msapplication-TileColor" content="#ffffff" />
    <meta name="msapplication-TileImage" content="/ms-icon-144x144.png" />
    <meta name="theme-color" content="#ffffff" />
  </head>
  <body>
    <div class={`container ${!isHome && "container--alt"}`}>
      <Header
        isHome={isHome}
        title={title}
        subtitle={subtitle}
        details={details}
        navItems={navItems}
        content={content}
      />
      <main class={!isHome && "main--alt"}>
        <slot />
        <footer>
          <small>
            Built with love using <a href="https://astro.build/" target="_blank"
              >Astro</a
            >, designed with inspiration from various websites on <a
              href="https://www.awwwards.com/"
              target="_blank">awwwards.com</a
            >
          </small>
          <br />
          <small>Â© Jasper Wang {new Date().getFullYear()}</small>
        </footer>
      </main>
    </div>
    <div id="cursor"></div>
  </body>
</html>

<style is:global>
  a {
    text-decoration: none;
    transition-duration: 500ms;
    color: rgba(var(--primary-text-value), 0.8);
  }

  a:hover {
    color: rgba(var(--primary-text-value), 1);
  }

  main > * + * {
    margin-block-start: var(--space-2xl);
  }

  main {
    padding-left: var(--space-l);
    padding-right: var(--space-l);
    position: relative;
  }

  footer,
  .footer--alt {
    font-family: "CommitMono VariableFont", monospace;
    position: relative;
    /** this is to balance out the padding for MainHeader **/
    padding-bottom: var(--space-2xl);
  }

  footer small {
    color: rgba(var(--primary-text-value), 0.6);
  }

  @media only screen and (min-width: 1024px) {
      /** reset padding back **/
      footer,
      .footer--alt {
          padding-bottom: initial
      }

    main {
      width: 60%;
      padding: var(--space-2xl) var(--space-l);
    }

    .main--alt {
      width: 70%;
    }
  }

  /* Animated Cursor Styling */
  #cursor {
    display: none;
    position: fixed;
    top: -5px;
    left: -5px;
    width: 40px;
    height: 40px;
    background-color: #333333;
    border-radius: 50%;
    pointer-events: none;
    mix-blend-mode: difference;
    z-index: 999;
    transition: all 200ms cubic-bezier(0.09, 0.55, 0.59, 0.97);
  }

  .hover-over-a {
    width: 20px !important;
    height: 20px !important;
    background-color: white !important;
    mix-blend-mode: difference !important;
  }

  .hover-over-text {
    opacity: 0.15;
  }

  /* Cap the width on tablet size */
  .container {
    max-width: 40rem;
    margin: 0 auto;
  }

  @media only screen and (min-width: 1024px) {
    body {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .container {
      display: flex;
      flex: 1;
      padding-left: var(--space-s);
      padding-right: var(--space-s);
      max-width: 65rem;
      position: relative;
      overflow-y: visible;
    }

    .container--alt {
      max-width: 75rem;
    }

    #cursor {
      display: block;
    }
  }

  .toggled {
    opacity: 1 !important;
  }

  svg,
  path {
    pointer-events: none;
  }

  /* 
   * High level, flexible layouts that provide a 
   * skeleton to support any variant of a component
   */
  /* 
     AUTO GRID
     Related Every Layout: https://every-layout.dev/layouts/grid/
     More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
     A flexible layout that will create an auto-fill grid with
     configurable grid item sizes.

     CUSTOM PROPERTIES AND CONFIGURATION
     --gutter (var(--space-s-m)): This defines the space
     between each item.

     --grid-min-item-size (14rem): How large each item should be
     ideally, as a minimum.

     --grid-placement (auto-fill): Set either auto-fit or auto-fill
     to change how empty grid tracks are handled. 
   */
  .grid {
    display: grid;
    grid-template-columns: repeat(
      var(--grid-placement, auto-fill),
      minmax(var(--grid-min-item-size, 16rem), 1fr)
    );
    gap: var(--gutter, var(--space-s-l));
  }

  /* Block */
  /*
     Button styles

     Globally style the button element, submit, button and reset input.
     Include the .button class for styling <a> tags as buttons. 
   */
  button,
  .button,
  input[type="submit"],
  input[type="reset"],
  input[type="button"] {
    background-color: var(--color-brand);
    color: var(--color-text);
    border: solid 0.1rem var(--color-text);
    border-radius: var(--border-radius);
    cursor: pointer;
    padding: var(--space-3xs) var(--space-2xs);
    display: inline-block;
    text-decoration: none;
    text-align: center;
  }

  button:hover,
  button:focus,
  .button:hover,
  .button:focus,
  input[type="submit"]:hover,
  input[type="submit"]:focus,
  input[type="reset"]:hover,
  input[type="reset"]:focus,
  input[type="button"]:hover input[type="button"]:focus {
    background-color: var(--color-text);
    color: var(--color-brand);

  }

  button:disabled,
  .button[aria-disabled="true"],
  input[type="submit"]:disabled,
  input[type="reset"]:disabled,
  input[type="button"]:disabled {
    background-color: var(--color-bg-mod-2);
    border: solid 0.1rem var(--color-bg-mod-2);
    color: var(--color-text-mod-2);
    cursor: not-allowed;
    transform: none;
    filter: none;
  }

  /* Utilities */
  .flow > * + * {
    margin-top: var(--flow-space, 1em);
  }
</style>

<script>
  /**
   * Handles focus and unfocus of sections
   */
  const sections = document.querySelectorAll("section");

  const options = {
    rootMargin: "-40% 0px -60% 0px",
  };

  const intersectionCallback = (
    entries: IntersectionObserverEntry[],
    _observer: IntersectionObserver,
  ) => {
    entries.forEach((entry) => {
      const navTarget = document.getElementById(
        `${entry.target.getAttribute("id")}Nav`,
      );

      if (entry.isIntersecting) {
        entry.target.classList.add("section-focus");
        // nav target may be excluded from being tracked
        navTarget?.classList.add("toggled");
        return;
      }
      entry.target.classList.remove("section-focus");

      navTarget?.classList.remove("toggled");
    });
  };

  const navObserver = new IntersectionObserver(intersectionCallback, options);
  sections.forEach((section) => navObserver.observe(section));

  /**
   * Handles cursor animations
   */

  const cursor = document.getElementById("cursor");

  const followCursorHandler = (e: MouseEvent) => {
    cursor.style.transform = `translate(${e.clientX}px, ${e.clientY}px)`;
  };

  document.body.addEventListener("mousemove", (e) => {
    followCursorHandler(e);
  });

  document.body.addEventListener("mouseover", (e) => {
    const hasAnchorParent = (e.target as HTMLElement).closest("a");
    const isAnchor = (e.target as HTMLElement).tagName === "A";

    hasAnchorParent || isAnchor
      ? cursor.classList.add("hover-over-a")
      : cursor.classList.remove("hover-over-a");

    if (isAnchor) return;

    const textElements = ["H1", "H2", "P", "SPAN"];
    textElements.indexOf((e.target as HTMLElement).tagName) >= 0
      ? cursor.classList.add("hover-over-text")
      : cursor.classList.remove("hover-over-text");
  });
</script>
