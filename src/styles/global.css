@charset "UTF-8";

@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "CommitMono VariableFont";
  font-style: normal;
  font-weight: 400;
  src: url("/fonts/CommitMono VariableFont.woff2") format("woff2"); /* Chrome 36+, Opera 23+, Firefox 39+ */
}

@font-face {
  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */
  font-family: "Apfel Grotezk";
  font-weight: 700;
  font-style: normal;
  src: url("/fonts/ApfelGrotezk-Fett.woff2") format("woff2");
  src: url("/fonts/ApfelGrotezk-Fett.woff") format("woff");
}

/* 
     Utopia fluid space

 @link https://utopia.fyi/space/calculator?c=320,16,1.2,1240,20,1.25,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12 
   */
:root {
  --space-3xs: clamp(0.25rem, calc(0.23rem + 0.11vw), 0.31rem);
  --space-2xs: clamp(0.5rem, calc(0.46rem + 0.22vw), 0.63rem);
  --space-xs: clamp(0.75rem, calc(0.68rem + 0.33vw), 0.94rem);
  --space-s: clamp(1rem, calc(0.91rem + 0.43vw), 1.25rem);
  --space-m: clamp(1.5rem, calc(1.37rem + 0.65vw), 1.88rem);
  --space-l: clamp(2rem, calc(1.83rem + 0.87vw), 2.5rem);
  --space-xl: clamp(3rem, calc(2.74rem + 1.3vw), 3.75rem);
  --space-2xl: clamp(4rem, calc(3.65rem + 1.74vw), 5rem);
  --space-3xl: clamp(6rem, calc(5.48rem + 2.61vw), 7.5rem);
  /* One-up pairs */
  --space-3xs-2xs: clamp(0.25rem, calc(0.12rem + 0.65vw), 0.63rem);
  --space-2xs-xs: clamp(0.5rem, calc(0.35rem + 0.76vw), 0.94rem);
  --space-xs-s: clamp(0.75rem, calc(0.58rem + 0.87vw), 1.25rem);
  --space-s-m: clamp(1rem, calc(0.7rem + 1.52vw), 1.88rem);
  --space-m-l: clamp(1.5rem, calc(1.15rem + 1.74vw), 2.5rem);
  --space-l-xl: clamp(2rem, calc(1.39rem + 3.04vw), 3.75rem);
  --space-xl-2xl: clamp(3rem, calc(2.3rem + 3.48vw), 5rem);
  --space-2xl-3xl: clamp(4rem, calc(2.78rem + 6.09vw), 7.5rem);
  /* Custom pairs */
  --space-s-l: clamp(1rem, calc(0.48rem + 2.61vw), 2.5rem);
}

/* 
     Global theme tokens
   */
:root {
  --primary-text: hsl(0, 0%, 10%);
  --primary-text-value: 26, 26, 26;
  --primary-bg: hsl(0, 0%, 97%);
  --code-background: #f6f7f9;
  --code-text: #47546b;
  --code-border: #e2e8f0;
  line-height: 1.5;
  /* Typography */
  --font-base: "CommitMono VariableFont", monospace;
  --font-display: var(--font-base);
  --font-accent: "CommitMono VariableFont", monospace;
  --font-weight-regular: 400;
  --font-weight-bold: 700;
  --line-height-compact: 1.2;
  --line-height-base: 1.5;
  --line-height-loose: 1.7;
  --width-compact: 35ch;
  --width-longform: 65ch;
  --tracking: -0.05ch;
  --tracking-s: -0.05ch;
  /* 
  Colors created with Utopia Kickstarter project 
  @link https://www.figma.com/community/file/1122903924123950023
  */
  --color-text: var(--primary-text);
  --color-text-mod-1: #494949;
  --color-text-mod-2: #616161;
  --color-bg: var(--primary-bg);
  --color-bg-mod-1: #f8f8f8;
  --color-bg-mod-2: #ededed;
  --color-border: #1d1d1d;
  --color-brand: var(--primary-bg);
  --color-accent: #9f2c5e;
  --color-highlight: #eefbc1;
  /* Grid */
  --gutter: var(--space-s-m);
  /* Effects */
  --border-radius: 8px;
  --shadow: 0px 3px 7px rgba(0, 0, 0, 0.08), 0px 0px 1px rgba(0, 0, 0, 0.025);
}
/* 
     Utopia fluid type

 @link https://utopia.fyi/type/calculator?c=320,14,1.2,1240,18,1.25,4,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,NaN 
   */
:root {
  --step--2: clamp(0.6076rem, 0.5686rem + 0.1954vw, 0.72rem);
  --step--1: clamp(0.7292rem, 0.6697rem + 0.2971vw, 0.9rem);
  --step-0: clamp(0.875rem, 0.788rem + 0.4348vw, 1.125rem);
  --step-1: clamp(1.05rem, 0.9261rem + 0.6196vw, 1.4063rem);
  --step-2: clamp(1.26rem, 1.0868rem + 0.8658vw, 1.7578rem);
  --step-3: clamp(1.512rem, 1.2736rem + 1.1918vw, 2.1973rem);
  --step-4: clamp(1.8144rem, 1.4902rem + 1.6212vw, 2.7466rem);
}

/* 
   * Embrace the cascade and inheritance to 
   * style as much as possible at a global level 
   */
/* 
     A modern reset

 @link: https://piccalil.li/blog/a-modern-css-reset/ 
   */
/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role="list"],
ol[role="list"] {
  list-style: none;
}

/* Prevent zooming when orientation changes on some iOS devices */
html {
  -moz-text-size-adjust: none;
  text-size-adjust: none;
  -webkit-text-size-adjust: none;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  -webkit-text-decoration-skip: ink;
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Remove all animations and transitions for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01s !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01s !important;
    scroll-behavior: auto !important;
  }
}

html,
body {
  background-color: var(--primary-bg);
  scroll-behavior: smooth;
  color: var(--primary-text);
}

::selection {
  background-color: #13262f;
  color: #ffffff;
}

/* 
     Global styles 

     Low-specificity, global styles that apply to the whole project: https://cube.fyi/css.html
   */
body {
  color: var(--color-text);
  background: var(--color-bg);
  font-size: var(--step-0);
  font-family: var(--font-base);
  letter-spacing: var(--tracking);
}

/* Base typesetting */
h1,
h2,
h3 {
  font-family: var(--font-display);
  line-height: 1.2;
  letter-spacing: var(--tracking-s);
}

h1,
.h1 {
  font-size: var(--step-2);

}

h2,
.h2 {
  font-size: var(--step--1);
}

h3,
.h3 {
  font-size: var(--step-1);
}

h4,
.h4 {
  font-size: var(--step-0);
}

h5,
.h5 {
  font-size: var(--step-0);
}

h6,
.h6 {
  font-size: var(--step--1);
}

/* Set line lengths */
p,
li,
blockquote:not([class]) {
  max-width: var(--width-longform);
}

h1,
h2,
h3 {
  max-width: var(--width-compact);
}

hr {
  border: none;
  border-top: 2px dotted;
}

kbd {
  background-color: var(--color-bg-mod-1);
  border: solid 1px var(--color-bg-mod-2);
  border-radius: var(--border-radius-sm);
  font-family: var(--font-accent);
  font-size: 1rem;
  padding: 0.115rem 0.25rem;
}

figcaption {
  font-size: var(--step--1);
  -webkit-margin-before: 0.5rem;
  margin-block-start: 0.5rem;
  text-align: center;
}

small {
  font-size: var(--step--1);
}

/* More generic elements */
blockquote:not([class]) {
  border-left: solid 3px var(--color-text);
  -webkit-padding-start: var(--space-s);
  padding-inline-start: var(--space-s);
  font-family: var(--font-display);
  font-size: var(--step-2);
  line-height: var(--line-height-base);
}

/* Markdown blockquuote:not([class])s aren't ideal, so we're presuming the person quoted is the last p */
blockquote:not([class]) p:last-of-type,
blockquote:not([class]) cite {
  font-family: var(--font-base);
  font-size: var(--step-1);
  font-weight: normal;
  -webkit-margin-before: var(--space-2xs);
  margin-block-start: var(--space-2xs);
}

svg {
  flex: none;
}
svg path {
  fill: var(--color-text);
}

/* Remove padding and margin on ul, ol elements with a list role */
[role="list"] {
  padding: 0;
  margin: 0;
}

/* Composition */
/*
CLUSTER
More info: https://every-layout.dev/layouts/cluster/
A layout that lets you distribute items with consitent
spacing, regardless of their size

CUSTOM PROPERTIES AND CONFIGURATION
--gutter ($global-gutter): This defines the space
between each item.

--cluster-horizontal-alignment (flex-start) How items should align
horizontally. Can be any acceptable flexbox aligmnent value.

--cluster-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gutter, var(--space-size-1));
  justify-content: var(--cluster-horizontal-alignment, flex-start);
  align-items: var(--cluster-vertical-alignment, center);
}

/* 
   * High level, flexible layouts that provide a 
   * skeleton to support any variant of a component
   */
/* 
     AUTO GRID
     Related Every Layout: https://every-layout.dev/layouts/grid/
     More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
     A flexible layout that will create an auto-fill grid with
     configurable grid item sizes.

     CUSTOM PROPERTIES AND CONFIGURATION
     --gutter (var(--space-s-m)): This defines the space
     between each item.

     --grid-min-item-size (14rem): How large each item should be
     ideally, as a minimum.

     --grid-placement (auto-fill): Set either auto-fit or auto-fill
     to change how empty grid tracks are handled. 
   */
.grid {
  display: grid;
  grid-template-columns: repeat(
    var(--grid-placement, auto-fill),
    minmax(var(--grid-min-item-size, 16rem), 1fr)
  );
  gap: var(--gutter, var(--space-s-l));
}

/* Block */
/* 
CALLOUT
*/
.callout {
  padding: var(--space-xs-s);
  border: dotted 2px var(--color-text);
  max-width: var(--width-longform);
  border-radius: var(--border-radius); }

.callout > * {
  line-height: var(--line-height-base); }

.callout[data-variant='brand'] {
  color: var(--color-brand);
  border: dotted 2px var(--color-brand); }

.callout[data-variant='brand'] > * {
  color: var(--color-brand); }

.prose {
  --flow-space: var(--space-s-m);
  line-height: var(--line-height-loose); }

.prose :is(p, ul:not([class]), ol:not([class])) {
  max-width: var(--width-longform); }

.prose :is(pre,pre+*,figure,figure+*,h2,h3,h4) {
  --flow-space: var(--space-l-xl); }

.prose blockquote {
  max-width: 40ch; }
/*
     Button styles

     Globally style the button element, submit, button and reset input.
     Include the .button class for styling <a> tags as buttons. 
   */
button,
.button,
input[type="submit"],
input[type="reset"],
input[type="button"] {
  background-color: var(--color-brand);
  color: var(--color-text);
  border: solid 0.1rem var(--color-text);
  border-radius: var(--border-radius);
  cursor: pointer;
  padding: var(--space-3xs) var(--space-2xs);
  display: inline-block;
  text-decoration: none;
  text-align: center;
}

button:hover,
button:focus,
.button:hover,
.button:focus,
input[type="submit"]:hover,
input[type="submit"]:focus,
input[type="reset"]:hover,
input[type="reset"]:focus,
input[type="button"]:hover input[type="button"]:focus {
  background-color: var(--color-text);
  color: var(--color-brand);
}

button:disabled,
.button[aria-disabled="true"],
input[type="submit"]:disabled,
input[type="reset"]:disabled,
input[type="button"]:disabled {
  background-color: var(--color-bg-mod-2);
  border: solid 0.1rem var(--color-bg-mod-2);
  color: var(--color-text-mod-2);
  cursor: not-allowed;
  transform: none;
  filter: none;
}

/* Utilities */
.flow > * + * {
  margin-top: var(--flow-space, 1em);
}
