---
import Layout from "@/layouts/Layout.astro";
import "keyboard-css/dist/css/main.min.css";
---

<Layout isHome={false}>
  <h1>Bob is Melting!</h1>
  <a href="#instruction"><small>See instruction</small></a>
  <div id="game-container">
    <div id="embed-html"></div>
  </div>
  <section class="flow prose" id="instruction">
    <h2>Instruction</h2>
    <p>
      Press <kbd class="kbc-button">←</kbd> and <kbd class="kbc-button">→</kbd>
       to move left and right
    </p>
    <p>Press <kbd class="kbc-button">↑</kbd> to jump</p>
    <p>
      Scoop up the snowballs and give them to Bob the Snowman before he melts
      away!
    </p>
    <aside class="callout flow">
      <h4>⚠️ Note</h4>
      <ul>
        <li>
          If arrow keys don't work, click on the game area to focus it first
        </li>
        <li>This game is only compatible on desktop!</li>
      </ul>
    </aside>
  </section>
</Layout>
<script
  type="text/javascript"
  src="/bob-is-melting-game-assets/html/html.nocache.js"></script>

<style>
  #embed-html {
    margin: 1rem 0;
  }

  section {
    margin-top: 0;
  }

  #game-container {
    margin: 0;
  }
</style>

<script>
  function handleMouseDown(evt) {
    evt.preventDefault();
    evt.stopPropagation();
    window.focus();
  }

  function handleMouseUp(evt) {
    evt.preventDefault();
    evt.stopPropagation();
  }

  function handleKeyDown(evt) {
    // Prevent default behavior for arrow keys and other game controls
    if (
      evt.key === "ArrowUp" ||
      evt.key === "ArrowDown" ||
      evt.key === "ArrowLeft" ||
      evt.key === "ArrowRight" ||
      evt.key === " "
    ) {
      // spacebar if you use it
      evt.preventDefault();
      evt.stopPropagation();
    }
  }

  document.addEventListener("contextmenu", (event) => event.preventDefault());

  document.addEventListener("keydown", handleKeyDown, false);
  document
    .getElementById("embed-html")
    .addEventListener("mousedown", handleMouseDown, false);
  document
    .getElementById("embed-html")
    .addEventListener("mouseup", handleMouseUp, false);

  // Remove table wrapper over the canvas element (that is
  // injected by LibGDX) so that the game's resizing mechanism works
  function extractCanvas() {
    const embedDiv = document.getElementById("embed-html");
    const canvas = embedDiv.querySelector("canvas");

    if (canvas) {
      // Clear everything in embed-html and add just the canvas
      embedDiv.innerHTML = "";
      embedDiv.appendChild(canvas);
      console.log("Canvas extracted successfully");
    } else {
      // Canvas not ready yet, try again
      setTimeout(extractCanvas, 100);
    }
  }

  // Start checking after LibGDX has time to initialize
  setTimeout(extractCanvas, 500);
</script>
